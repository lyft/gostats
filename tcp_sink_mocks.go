// Code generated by MockGen. DO NOT EDIT.
// Source: tcp_sink.go

package stats

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockconn is a mock of conn interface
type Mockconn struct {
	ctrl     *gomock.Controller
	recorder *MockconnMockRecorder
}

// MockconnMockRecorder is the mock recorder for Mockconn
type MockconnMockRecorder struct {
	mock *Mockconn
}

// NewMockconn creates a new mock instance
func NewMockconn(ctrl *gomock.Controller) *Mockconn {
	mock := &Mockconn{ctrl: ctrl}
	mock.recorder = &MockconnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockconn) EXPECT() *MockconnMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *Mockconn) Write(b []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockconnMockRecorder) Write(b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Mockconn)(nil).Write), b)
}

// Close mocks base method
func (m *Mockconn) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockconnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockconn)(nil).Close))
}

// Mockdialer is a mock of dialer interface
type Mockdialer struct {
	ctrl     *gomock.Controller
	recorder *MockdialerMockRecorder
}

// MockdialerMockRecorder is the mock recorder for Mockdialer
type MockdialerMockRecorder struct {
	mock *Mockdialer
}

// NewMockdialer creates a new mock instance
func NewMockdialer(ctrl *gomock.Controller) *Mockdialer {
	mock := &Mockdialer{ctrl: ctrl}
	mock.recorder = &MockdialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockdialer) EXPECT() *MockdialerMockRecorder {
	return m.recorder
}

// Dial mocks base method
func (m *Mockdialer) Dial(network, address string) (conn, error) {
	ret := m.ctrl.Call(m, "Dial", network, address)
	ret0, _ := ret[0].(conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial
func (mr *MockdialerMockRecorder) Dial(network, address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*Mockdialer)(nil).Dial), network, address)
}
